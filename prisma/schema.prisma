// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    role          UserRole     @default(USER)
    accounts      Account[]
    sessions      Session[]
    problems      Problem[]
    submissions   Submission[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Problem {
    id            Int          @id @default(autoincrement()) @db.UnsignedInt // Unique id of the problem
    authorId      String // Unique id of the problem's author
    title         String // The title of the problem
    created       DateTime     @default(now()) // Timestamp of when the problem was created
    edited        DateTime     @updatedAt // Timestamp of when the problem was last edited
    time          Int          @db.UnsignedSmallInt // Execution time given for users to solve the problem, in milliseconds
    memory        Int          @db.UnsignedMediumInt // Memory given for users to solve the problem, in kilobytes
    text          String       @db.Text // Problem text
    testCases     TestCase[] // List of test cases for the problem
    showTestCases Boolean // Whether the test cases should be displayed to the users upon attempting the problem
    verified      Boolean      @default(false) // Whether the problem has been verified
    published     Boolean      @default(false) // Whether the problem has been published
    submissions   Submission[] // List of submissions for the problem
    author        User         @relation(fields: [authorId], references: [id], onDelete: Cascade)

    @@index([authorId])
}

// This model stores a test case
model TestCase {
    id        String  @id @default(cuid()) // Unique id of the test case
    problemId Int     @db.UnsignedInt // Unique id of the test case's problem
    input     String  @db.MediumText // Test case input
    output    String  @db.MediumText // Test case output
    problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

    @@index([problemId])
}

// This model is how a submission is stored
model Submission {
    id        String     @id @default(cuid()) // Unique id of the submission
    authorId  String // Unique id of the submission's author
    problemId Int?       @db.UnsignedInt // Unique id of the submission's problem
    code      String     @db.Text // Submitted code
    language  Language // The programming language the code is in
    tests     CodeExec[]
    author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
    problem   Problem?   @relation(fields: [problemId], references: [id], onDelete: SetNull)

    @@index([authorId])
    @@index([problemId])
}

// This model is basically the default Judge0 submission info
model CodeExec {
    id             String     @id // Unique id of the submission (which is the Judge0 token)
    submissionId   String // Unique id of the result's submission
    stdout         String?    @db.MediumText // Program output (can be rather long)
    time           Int?       @db.UnsignedSmallInt // Time for program execution, in milliseconds
    memory         Int?       @db.UnsignedMediumInt // Memory for program execution, in kilobytes
    stderr         String?    @db.Text // Program output to standard error
    compile_output String?    @db.Text // Compiler output
    message        String? // Judge0 / Isolate status message
    statusId       Int // Status code of the submission
    Submission     Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

    @@index([submissionId])
}

enum UserRole {
    USER
    MOD
    ADMIN
    OWNER
}

enum Language {
    CPP
    JAVA
}
